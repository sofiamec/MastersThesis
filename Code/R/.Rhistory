datanew=merge(datanew, sampledvector, by.x = 1, by.y = 1, all.x = T)          # merge the sampled vector with the dataframe for the resampled data
}
rownames(datanew) <- data1[,1]  # add genes as row names
data1 <- datanew[,-1]           # remove column containg genes
data1[is.na(datanew)] <- 0      # set all "NA" to 0
return(datanew)
}
new_data=resample(samplevector)
# Creating resampled datasets
gut1 <-read.table("../../Data/Raw_data/HumanGutI_COGcountsRaw.txt", header=T, row.names = 1)
data <- gut1                        # dataset to resample from
n=10                                # number of samples in the new datasets
m=100                               # sequencing depth for each sample in the new datasets
samplevector=sample(ncol(data), 2*n)# vector w. the columnnumber of the sampled samples for both datasets
datanew=data.frame(row.names(data), stringsAsFactors = F)   # empty dataframe to put the resampled data in
readlist <- rep(row.names(data), times=samples[1])                            # vector containing the each read as one entry
readlist <- rep(row.names(data), times=samplevector[1])                            # vector containing the each read as one entry
readlist[1:10]
samplevector[1]
data[samplevector[1]]
readlist <- rep(row.names(data), times=data[samplevector[1]]))                            # vector containing the each read as one entry
readlist <- rep(row.names(data), times=data[samplevector[1]])                            # vector containing the each read as one entry
data[samplevector[1]]
data[samplevector[1]][2]
data[,samplevector[1]]
readlist <- rep(row.names(data), times=data[,samplevector[1]])                            # vector containing the each read as one entry
readlist[1:10]
data[103]
data[1:10,103]
data[1:10,74]
readlist[15:17]
readlist <- rep(row.names(data), times=data[,samplevector[2]])                            # vector containing the each read as one entry
readlist[1:10]
readlist <- rep(row.names(data), times=data[,samplevector[1]])                            # vector containing the each read as one entry
sampledreads <- sample(readlist, size=m)                                      # vector with m resampled reads from "readlist"
sampledvector <- as.data.frame(table(sampledreads), stringsAsFactors = FALSE) # assemble vector "sampledreads" into dataframe
View(sampledvector)
colnames(sampledvector) <- c("Gene",colnames(data[samples[i]]))               # name the columns according to the sample-name
colnames(sampledvector) <- c("Gene",colnames(data[samplevector[1]]))               # name the columns according to the sample-name
colnames(data[103])
datanew=merge(datanew, sampledvector, by.x = 1, by.y = 1, all.x = T)          # merge the sampled vector with the dataframe for the resampled data
View(datanew)
# Creating resampled datasets
gut1 <-read.table("../../Data/Raw_data/HumanGutI_COGcountsRaw.txt", header=T, row.names = 1)
data <- gut1                        # dataset to resample from
n=10                                # number of samples in the new datasets
m=100                               # sequencing depth for each sample in the new datasets
samplevector=sample(ncol(data), 2*n)# vector w. the columnnumber of the sampled samples for both datasets
## Resample-function
# input arguments:
# samples = the samples to resample the given sequencing depth (m) from
# output:  the resampled data in a dataframe
resample = function(samples){
datanew=data.frame(row.names(data), stringsAsFactors = F)   # empty dataframe to put the resampled data in
for (i in 1:(2*n)){
readlist <- rep(row.names(data), times=data[,samplevector[i]])                # vector containing the each read as one entry
sampledreads <- sample(readlist, size=m)                                      # vector with m resampled reads from "readlist"
sampledvector <- as.data.frame(table(sampledreads), stringsAsFactors = FALSE) # assemble vector "sampledreads" into dataframe
colnames(sampledvector) <- c("Gene",colnames(data[samplevector[i]]))          # name the columns according to the sample-name
datanew=merge(datanew, sampledvector, by.x = 1, by.y = 1, all.x = T)          # merge the sampled vector with the dataframe for the resampled data
}
rownames(datanew) <- data1[,1]  # add genes as row names
data1 <- datanew[,-1]           # remove column containg genes
data1[is.na(datanew)] <- 0      # set all "NA" to 0
return(datanew)
}
new_data=resample(samplevector)
# Original datasets
gut1 <-read.table("../../Data/Raw_data/HumanGutI_COGcountsRaw.txt", header=T, row.names = 1)
data <- gut1                        # dataset to resample from
n=10                                # number of samples in the new datasets
m=100                               # sequencing depth for each sample in the new datasets
samplevector=sample(ncol(data), 2*n)# vector w. the columnnumber of the sampled samples for both datasets
## Resample-function
# input arguments:
# samples = the samples to resample the given sequencing depth (m) from
# output:  the resampled data in a dataframe
resample = function(samples){
datanew=data.frame(row.names(data), stringsAsFactors = F)   # empty dataframe to put the resampled data in
for (i in 1:(2*n)){
readlist <- rep(row.names(data), times=data[,samplevector[i]])                # vector containing the each read as one entry
sampledreads <- sample(readlist, size=m)                                      # vector with m resampled reads from "readlist"
sampledvector <- as.data.frame(table(sampledreads), stringsAsFactors = FALSE) # assemble vector "sampledreads" into dataframe
colnames(sampledvector) <- c("Gene",colnames(data[samplevector[i]]))          # name the columns according to the sample-name
datanew=merge(datanew, sampledvector, by.x = 1, by.y = 1, all.x = T)          # merge the sampled vector with the dataframe for the resampled data
}
rownames(datanew) <- datanew[,1]  # add genes as row names
data1 <- datanew[,-1]           # remove column containg genes
data1[is.na(datanew)] <- 0      # set all "NA" to 0
return(datanew)
}
new_data=resample(samplevector)
# Original datasets
gut1 <-read.table("../../Data/Raw_data/HumanGutI_COGcountsRaw.txt", header=T, row.names = 1)
data <- gut1                        # dataset to resample from
n=10                                # number of samples in the new datasets
m=100                               # sequencing depth for each sample in the new datasets
samplevector=sample(ncol(data), n)# vector w. the columnnumber of the sampled samples for both datasets
## Resample-function
# input arguments:
# samples = the samples to resample the given sequencing depth (m) from
# output:  the resampled data in a dataframe
resample = function(samples){
datanew=data.frame(row.names(data), stringsAsFactors = F)   # empty dataframe to put the resampled data in
for (i in 1:n){
readlist <- rep(row.names(data), times=data[,samplevector[i]])                # vector containing the each read as one entry
sampledreads <- sample(readlist, size=m)                                      # vector with m resampled reads from "readlist"
sampledvector <- as.data.frame(table(sampledreads), stringsAsFactors = FALSE) # assemble vector "sampledreads" into dataframe
colnames(sampledvector) <- c("Gene",colnames(data[samplevector[i]]))          # name the columns according to the sample-name
datanew=merge(datanew, sampledvector, by.x = 1, by.y = 1, all.x = T)          # merge the sampled vector with the dataframe for the resampled data
}
rownames(datanew) <- datanew[,1]  # add genes as row names
data1 <- datanew[,-1]           # remove column containg genes
data1[is.na(datanew)] <- 0      # set all "NA" to 0
return(datanew)
}
new_data=resample(samplevector)
# Original datasets
gut1 <-read.table("../../Data/Raw_data/HumanGutI_COGcountsRaw.txt", header=T, row.names = 1)
data <- gut1                        # dataset to resample from
n=10                                # number of samples in the new datasets
m=100                               # sequencing depth for each sample in the new datasets
samplevector=sample(ncol(data), n)# vector w. the columnnumber of the sampled samples for both datasets
datanew=data.frame(row.names(data), stringsAsFactors = F)   # empty dataframe to put the resampled data in
readlist <- rep(row.names(data), times=data[,samplevector[1]])                # vector containing the each read as one entry
readlist
readlist[1:10]
data[35]
data[1:10, 35]
readlist[1:15]
sampledreads <- sample(readlist, size=m)                                      # vector with m resampled reads from "readlist"
sampledvector <- as.data.frame(table(sampledreads), stringsAsFactors = FALSE) # assemble vector "sampledreads" into dataframe
View(sampledvector)
colnames(sampledvector) <- c("Gene",colnames(data[samplevector[1]]))          # name the columns according to the sample-name
colnames(data[35])
datanew=merge(datanew, sampledvector, by.x = 1, by.y = 1, all.x = T)          # merge the sampled vector with the dataframe for the resampled data
View(datanew)
rownames(datanew) <- datanew[,1]  # add genes as row names
datanew=data.frame(row.names(data), stringsAsFactors = F)   # empty dataframe to put the resampled data in
readlist <- rep(row.names(data), times=data[,samplevector[1]])                # vector containing the each read as one entry
sampledreads <- sample(readlist, size=m)                                      # vector with m resampled reads from "readlist"
sampledvector <- as.data.frame(table(sampledreads), stringsAsFactors = FALSE) # assemble vector "sampledreads" into dataframe
colnames(sampledvector) <- c("Gene",colnames(data[samplevector[1]]))          # name the columns according to the sample-name
datanew=merge(datanew, sampledvector, by.x = 1, by.y = 1, all.x = T)          # merge the sampled vector with the dataframe for the resampled data
readlist <- rep(row.names(data), times=data[,samplevector[2]])                # vector containing the each read as one entry
sampledreads <- sample(readlist, size=m)                                      # vector with m resampled reads from "readlist"
sampledvector <- as.data.frame(table(sampledreads), stringsAsFactors = FALSE) # assemble vector "sampledreads" into dataframe
colnames(sampledvector) <- c("Gene",colnames(data[samplevector[2]]))          # name the columns according to the sample-name
datanew=merge(datanew, sampledvector, by.x = 1, by.y = 1, all.x = T)          # merge the sampled vector with the dataframe for the resampled data
readlist <- rep(row.names(data), times=data[,samplevector[3]])                # vector containing the each read as one entry
sampledreads <- sample(readlist, size=m)                                      # vector with m resampled reads from "readlist"
sampledvector <- as.data.frame(table(sampledreads), stringsAsFactors = FALSE) # assemble vector "sampledreads" into dataframe
colnames(sampledvector) <- c("Gene",colnames(data[samplevector[3]]))          # name the columns according to the sample-name
datanew=merge(datanew, sampledvector, by.x = 1, by.y = 1, all.x = T)          # merge the sampled vector with the dataframe for the resampled data
rownames(datanew) <- datanew[,1]  # add genes as row names
data1 <- datanew[,-1]           # remove column containg genes
datanew <- datanew[,-1]           # remove column containg genes
datanew[is.na(datanew)] <- 0
# Original datasets
gut1 <-read.table("../../Data/Raw_data/HumanGutI_COGcountsRaw.txt", header=T, row.names = 1)
data <- gut1                        # dataset to resample from
n=10                                # number of samples in the new datasets
m=100                               # sequencing depth for each sample in the new datasets
samplevector=sample(ncol(data), n)# vector w. the columnnumber of the sampled samples for both datasets
## Resample-function
# input arguments:
# samples = the samples to resample the given sequencing depth (m) from
# output:  the resampled data in a dataframe
resample = function(samples){
datanew=data.frame(row.names(data), stringsAsFactors = F)   # empty dataframe to put the resampled data in
for (i in 1:n){
readlist <- rep(row.names(data), times=data[,samplevector[i]])                # vector containing the each read as one entry
sampledreads <- sample(readlist, size=m)                                      # vector with m resampled reads from "readlist"
sampledvector <- as.data.frame(table(sampledreads), stringsAsFactors = FALSE) # assemble vector "sampledreads" into dataframe
colnames(sampledvector) <- c("Gene",colnames(data[samplevector[i]]))          # name the columns according to the sample-name
datanew=merge(datanew, sampledvector, by.x = 1, by.y = 1, all.x = T)          # merge the sampled vector with the dataframe for the resampled data
}
rownames(datanew) <- datanew[,1]  # add genes as row names
datanew <- datanew[,-1]           # remove column containg genes
datanew[is.na(datanew)] <- 0      # set all "NA" to 0
return(datanew)
}
new_data=resample(samplevector)
colSums(new_data)
n=50                                # number of samples in the new datasets
m=5000                              # sequencing depth for each sample in the new datasets
samplevector=sample(ncol(data), n)# vector w. the columnnumber of the sampled samples for both datasets
## Resample-function
# input arguments:
# samples = the samples to resample the given sequencing depth (m) from
# output:  the resampled data in a dataframe
resample = function(samples){
datanew=data.frame(row.names(data), stringsAsFactors = F)   # empty dataframe to put the resampled data in
for (i in 1:n){
readlist <- rep(row.names(data), times=data[,samplevector[i]])                # vector containing the each read as one entry
sampledreads <- sample(readlist, size=m)                                      # vector with m resampled reads from "readlist"
sampledvector <- as.data.frame(table(sampledreads), stringsAsFactors = FALSE) # assemble vector "sampledreads" into dataframe
colnames(sampledvector) <- c("Gene",colnames(data[samplevector[i]]))          # name the columns according to the sample-name
datanew=merge(datanew, sampledvector, by.x = 1, by.y = 1, all.x = T)          # merge the sampled vector with the dataframe for the resampled data
}
rownames(datanew) <- datanew[,1]  # add genes as row names
datanew <- datanew[,-1]           # remove column containg genes
datanew[is.na(datanew)] <- 0      # set all "NA" to 0
return(datanew)
}
new_data=resample(samplevector)
colSums(new_data)
View(new_data)
data <- gut1                        # dataset to resample from
n=50                                # number of samples in the new datasets
m=5000                              # sequencing depth for each sample in the new datasets
samplevector=sample(ncol(data), 2*n)# vector w. the columnnumber of the sampled samples for both datasets
## Resample-function
# input arguments:
# samples = the samples to resample the given sequencing depth (m) from
# output:  the resampled data in a dataframe
resample = function(samples){
datanew=data.frame(row.names(data), stringsAsFactors = F)   # empty dataframe to put the resampled data in
for (i in 1:2*n){
readlist <- rep(row.names(data), times=data[,samplevector[i]])                # vector containing the each read as one entry
sampledreads <- sample(readlist, size=m)                                      # vector with m resampled reads from "readlist"
sampledvector <- as.data.frame(table(sampledreads), stringsAsFactors = FALSE) # assemble vector "sampledreads" into dataframe
colnames(sampledvector) <- c("Gene",colnames(data[samplevector[i]]))          # name the columns according to the sample-name
datanew=merge(datanew, sampledvector, by.x = 1, by.y = 1, all.x = T)          # merge the sampled vector with the dataframe for the resampled data
}
rownames(datanew) <- datanew[,1]  # add genes as row names
datanew <- datanew[,-1]           # remove column containg genes
datanew[is.na(datanew)] <- 0      # set all "NA" to 0
return(datanew)
}
new_data=resample(samplevector)
data <- gut1                        # dataset to resample from
n=50                                # number of samples in the new datasets
m=5000                              # sequencing depth for each sample in the new datasets
samplevector=sample(ncol(data), 2*n)# vector w. the columnnumber of the sampled samples for both datasets
## Resample-function
# input arguments:
# samples = the samples to resample the given sequencing depth (m) from
# output:  the resampled data in a dataframe
resample = function(samples){
datanew=data.frame(row.names(data), stringsAsFactors = F)   # empty dataframe to put the resampled data in
for (i in 1:(2*n)){
readlist <- rep(row.names(data), times=data[,samplevector[i]])                # vector containing the each read as one entry
sampledreads <- sample(readlist, size=m)                                      # vector with m resampled reads from "readlist"
sampledvector <- as.data.frame(table(sampledreads), stringsAsFactors = FALSE) # assemble vector "sampledreads" into dataframe
colnames(sampledvector) <- c("Gene",colnames(data[samplevector[i]]))          # name the columns according to the sample-name
datanew=merge(datanew, sampledvector, by.x = 1, by.y = 1, all.x = T)          # merge the sampled vector with the dataframe for the resampled data
}
rownames(datanew) <- datanew[,1]  # add genes as row names
datanew <- datanew[,-1]           # remove column containg genes
datanew[is.na(datanew)] <- 0      # set all "NA" to 0
return(datanew)
}
new_data=resample(samplevector)
colSums(new_data)
# Original datasets
gut1 <-read.table("../../Data/Raw_data/HumanGutI_COGcountsRaw.txt", header=T, row.names = 1)
data <- gut1                        # dataset to resample from
n=50                                # number of samples in the new datasets
m=5000                              # sequencing depth for each sample in the new datasets
samplevector=sample(ncol(data), 2*n)# vector w. the columnnumber of the sampled samples for both datasets
## Resample-function
# input arguments:
# samples = the samples to resample the given sequencing depth (m) from
# output:  the resampled data in a dataframe
resample = function(samples){
datanew=data.frame(row.names(data), stringsAsFactors = F)   # empty dataframe to put the resampled data in
for (i in 1:(2*n)){
readlist <- rep(row.names(data), times=data[,samplevector[i]])                # vector containing the each read as one entry
sampledreads <- sample(readlist, size=m)                                      # vector with m resampled reads from "readlist"
sampledvector <- as.data.frame(table(sampledreads), stringsAsFactors = FALSE) # assemble vector "sampledreads" into dataframe
colnames(sampledvector) <- c("Gene",colnames(data[samplevector[i]]))          # name the columns according to the sample-name
datanew=merge(datanew, sampledvector, by.x = 1, by.y = 1, all.x = T)          # merge the sampled vector with the dataframe for the resampled data
}
rownames(datanew) <- datanew[,1]  # add genes as row names
datanew <- datanew[,-1]           # remove column containg genes
datanew[is.na(datanew)] <- 0      # set all "NA" to 0
return(datanew)
}
new_data=resample(samplevector)
colSums(new_data)
View(new_data)
1:n
(n+1):(2*n)
## Resample-function
# input arguments:
# samples = the samples to resample the given sequencing depth (m) from
# output:  the resampled data in a dataframe
resample = function(samples){
datanew=data.frame(row.names(data), stringsAsFactors = F)   # empty dataframe to put the resampled data in
for (i in 1:(2*n)){
readlist <- rep(row.names(data), times=data[,samplevector[i]])                # vector containing the each read as one entry
sampledreads <- sample(readlist, size=m)                                      # vector with m resampled reads from "readlist"
sampledvector <- as.data.frame(table(sampledreads), stringsAsFactors = FALSE) # assemble vector "sampledreads" into dataframe
colnames(sampledvector) <- c("Gene",colnames(data[samplevector[i]]))          # name the columns according to the sample-name
datanew=merge(datanew, sampledvector, by.x = 1, by.y = 1, all.x = T)          # merge the sampled vector with the dataframe for the resampled data
}
rownames(datanew) <- datanew[,1]  # add genes as row names
datanew <- datanew[,-1]           # remove column containg genes
datanew[is.na(datanew)] <- 0      # set all "NA" to 0
return(list(datanew[1:n], datanew((n+1):(2:n))))
}
new_data=resample(samplevector)
n=10                                # number of samples in the new datasets
m=100                               # sequencing depth for each sample in the new datasets
samplevector=sample(ncol(data), 2*n)# vector w. the columnnumber of the sampled samples for both datasets
## Resample-function
# input arguments:
# samples = the samples to resample the given sequencing depth (m) from
# output:  the resampled data in a dataframe
resample = function(samples){
datanew=data.frame(row.names(data), stringsAsFactors = F)   # empty dataframe to put the resampled data in
for (i in 1:(2*n)){
readlist <- rep(row.names(data), times=data[,samplevector[i]])                # vector containing the each read as one entry
sampledreads <- sample(readlist, size=m)                                      # vector with m resampled reads from "readlist"
sampledvector <- as.data.frame(table(sampledreads), stringsAsFactors = FALSE) # assemble vector "sampledreads" into dataframe
colnames(sampledvector) <- c("Gene",colnames(data[samplevector[i]]))          # name the columns according to the sample-name
datanew=merge(datanew, sampledvector, by.x = 1, by.y = 1, all.x = T)          # merge the sampled vector with the dataframe for the resampled data
}
rownames(datanew) <- datanew[,1]  # add genes as row names
datanew <- datanew[,-1]           # remove column containg genes
datanew[is.na(datanew)] <- 0      # set all "NA" to 0
return(list(datanew[1:n], datanew[(n+1):(2:n)]))
}
new_data=resample(samplevector)
(n+1):(2:n)
## Resample-function
# input arguments:
# samples = the samples to resample the given sequencing depth (m) from
# output:  the resampled data in a dataframe
resample = function(samples){
datanew=data.frame(row.names(data), stringsAsFactors = F)   # empty dataframe to put the resampled data in
for (i in 1:(2*n)){
readlist <- rep(row.names(data), times=data[,samplevector[i]])                # vector containing the each read as one entry
sampledreads <- sample(readlist, size=m)                                      # vector with m resampled reads from "readlist"
sampledvector <- as.data.frame(table(sampledreads), stringsAsFactors = FALSE) # assemble vector "sampledreads" into dataframe
colnames(sampledvector) <- c("Gene",colnames(data[samplevector[i]]))          # name the columns according to the sample-name
datanew=merge(datanew, sampledvector, by.x = 1, by.y = 1, all.x = T)          # merge the sampled vector with the dataframe for the resampled data
}
rownames(datanew) <- datanew[,1]  # add genes as row names
datanew <- datanew[,-1]           # remove column containg genes
datanew[is.na(datanew)] <- 0      # set all "NA" to 0
return(list(datanew[1:n], datanew[(n+1):(2*n)]))
}
new_data=resample(samplevector)
data1=new_data[1]
View(data1)
data1=as.dataframe(new_data[1])
data1=as.data.frame(new_data[1])
View(data1)
data1=new_data[[1]]
## Resample-function
# input arguments:
# samples = the samples to resample the given sequencing depth (m) from
# output:  the resampled data in a dataframe
resample = function(samples){
datanew=data.frame(row.names(data), stringsAsFactors = F)   # empty dataframe to put the resampled data in
for (i in 1:(2*n)){
readlist <- rep(row.names(data), times=data[,samplevector[i]])                # vector containing the each read as one entry
sampledreads <- sample(readlist, size=m)                                      # vector with m resampled reads from "readlist"
sampledvector <- as.data.frame(table(sampledreads), stringsAsFactors = FALSE) # assemble vector "sampledreads" into dataframe
colnames(sampledvector) <- c("Gene",colnames(data[samplevector[i]]))          # name the columns according to the sample-name
datanew <- merge(datanew, sampledvector, by.x = 1, by.y = 1, all.x = T)          # merge the sampled vector with the dataframe for the resampled data
}
rownames(datanew) <- datanew[,1]  # add genes as row names
datanew <- datanew[,-1]           # remove column containg genes
datanew[is.na(datanew)] <- 0      # set all "NA" to 0
return(list(datanew[1:n], datanew[(n+1):(2*n)]))
}
new_data=resample(samplevector)
data1=new_data[[1]]
colSums(data1)
# Original datasets
gut1 <-read.table("../../Data/Raw_data/HumanGutI_COGcountsRaw.txt", header=T, row.names = 1)
## Resample-function
# input arguments:
# samples = the samples to resample the given sequencing depth (m) from
# output:  the resampled data in a dataframe
resample = function(samples){
datanew=data.frame(row.names(data), stringsAsFactors = F)   # empty dataframe to put the resampled data in
for (i in 1:(2*n)){
readlist <- rep(row.names(data), times=data[,samplevector[i]])                # vector containing the each read as one entry
sampledreads <- sample(readlist, size=m)                                      # vector with m resampled reads from "readlist"
sampledvector <- as.data.frame(table(sampledreads), stringsAsFactors = FALSE) # assemble vector "sampledreads" into dataframe
colnames(sampledvector) <- c("Gene",colnames(data[samplevector[i]]))          # name the columns according to the sample-name
datanew <- merge(datanew, sampledvector, by.x = 1, by.y = 1, all.x = T)          # merge the sampled vector with the dataframe for the resampled data
}
rownames(datanew) <- datanew[,1]  # add genes as row names
datanew <- datanew[,-1]           # remove column containg genes
datanew[is.na(datanew)] <- 0      # set all "NA" to 0
return(list(datanew[1:n], datanew[(n+1):(2*n)]))
}
data <- gut1                        # dataset to resample from
n=10                                # number of samples in the new datasets
m=100                               # sequencing depth for each sample in the new datasets
samplevector=sample(ncol(data), 2*n)# vector w. the columnnumber of the sampled samples for both datasets
resampleddata=resample(samplevector)
data1=resampleddata[[1]]
data2=resampleddata[[2]]
colSums(data1)
#-----------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------- FUNCTION ---------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------
## Resample-function
# input arguments:
# samples = the samples that will be resample until the given sequencing depth (m) is reached
# output:  the resampled data in a large dataframe containing n*2 groups
resample = function(data){
samplevector=sample(ncol(data), 2*n)
datanew=data.frame(row.names(data), stringsAsFactors = F)  # dataframe to put the resampled data in
for (i in 1:(2*n)){
readlist <- rep(row.names(data), times=data[,samplevector[i]])                # vector containing each read as one entry
sampledreads <- sample(readlist, size=m)                                      # vector with m resampled reads from "readlist"
sampledvector <- as.data.frame(table(sampledreads), stringsAsFactors = FALSE) # assemble vector "sampledreads" into dataframe
colnames(sampledvector) <- c("Gene",colnames(data[samplevector[i]]))          # name the columns according to the sample-name
datanew <- merge(datanew, sampledvector, by.x = 1, by.y = 1, all.x = T)       # insert "sampledvector" to "datanew"
}
rownames(datanew) <- datanew[,1]                  # add genes as row names
datanew <- datanew[,-1]                           # remove column containg genes
datanew[is.na(datanew)] <- 0                      # set all "NA" to 0
return(list(datanew[1:n], datanew[(n+1):(2*n)]))  # didivde into two datasets
}
resampleddata=resample(gut1)
data1=resampleddata[[1]]
data2=resampleddata[[2]]
# Original datasets
gut1 <-read.table("../../Data/Raw_data/HumanGutI_COGcountsRaw.txt", header=T, row.names = 1)
#-----------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------- FUNCTION ---------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------
## Resample-function
# input arguments:
# samples = the samples that will be resample until the given sequencing depth (m) is reached
# output:  the resampled data in a large dataframe containing n*2 groups
resample = function(data){
samplevector=sample(ncol(data), 2*n)
datanew=data.frame(row.names(data), stringsAsFactors = F)  # dataframe to put the resampled data in
for (i in 1:(2*n)){
readlist <- rep(row.names(data), times=data[,samplevector[i]])                # vector containing each read as one entry
sampledreads <- sample(readlist, size=m)                                      # vector with m resampled reads from "readlist"
sampledvector <- as.data.frame(table(sampledreads), stringsAsFactors = FALSE) # assemble vector "sampledreads" into dataframe
colnames(sampledvector) <- c("Gene",colnames(data[samplevector[i]]))          # name the columns according to the sample-name
datanew <- merge(datanew, sampledvector, by.x = 1, by.y = 1, all.x = T)       # insert "sampledvector" to "datanew"
}
rownames(datanew) <- datanew[,1]                  # add genes as row names
datanew <- datanew[,-1]                           # remove column containg genes
datanew[is.na(datanew)] <- 0                      # set all "NA" to 0
return(list(datanew[1:n], datanew[(n+1):(2*n)]))  # didivde into two datasets
}
n=10                                 # number of samples in the new datasets
m=100                                # sequencing depth for each sample in the new datasets
resampleddata=resample(gut1)
data1=resampleddata[[1]]
data2=resampleddata[[2]]
# Original datasets
gut1 <-read.table("../../Data/Raw_data/HumanGutI_COGcountsRaw.txt", header=T, row.names = 1)
#-----------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------- FUNCTION ---------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------
## Resample-function
# input arguments:
# samples = the samples that will be resample until the given sequencing depth (m) is reached
# output:  the resampled data in a large dataframe containing n*2 groups
resample = function(data){
samplevector=sample(ncol(data), 2*n)                      # vector w. the columnnumber of the sampled samples for both datasets
datanew=data.frame(row.names(data), stringsAsFactors = F) # dataframe to put the resampled data in
for (i in 1:(2*n)){
readlist <- rep(row.names(data), times=data[,samplevector[i]])                # vector containing each read as one entry
sampledreads <- sample(readlist, size=m)                                      # vector with m resampled reads from "readlist"
sampledvector <- as.data.frame(table(sampledreads), stringsAsFactors = FALSE) # assemble vector "sampledreads" into dataframe
colnames(sampledvector) <- c("Gene",colnames(data[samplevector[i]]))          # name the columns according to the sample-name
datanew <- merge(datanew, sampledvector, by.x = 1, by.y = 1, all.x = T)       # insert "sampledvector" to "datanew"
}
rownames(datanew) <- datanew[,1]                  # add genes as row names
datanew <- datanew[,-1]                           # remove column containg genes
datanew[is.na(datanew)] <- 0                      # set all "NA" to 0
return(list(datanew[1:n], datanew[(n+1):(2*n)]))  # didivde into two datasets
}
n=10                          # number of samples in the new datasets
m=100                         # sequencing depth for each sample in the new datasets
resampleddata=resample(gut1)  # resampling of gut1
data1=resampleddata[[1]]      # extract resampled dataset1
data2=resampleddata[[2]]      # extract resampled dataset1
# Original datasets
gut1 <-read.table("../../Data/Raw_data/HumanGutI_COGcountsRaw.txt", header=T, row.names = 1)
#-----------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------- FUNCTION ---------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------
## Resample-function
# input arguments:
# data = the data to sample from
# n = number of samples in the new datasets
# m = sequencing depth for each sample in the new datasets
# output:  the resampled data in a large dataframe containing n*2 groups
resample = function(data, n, m){
samplevector=sample(ncol(data), 2*n)                      # vector w. the columnnumber of the sampled samples for both datasets
datanew=data.frame(row.names(data), stringsAsFactors = F) # dataframe to put the resampled data in
for (i in 1:(2*n)){
readlist <- rep(row.names(data), times=data[,samplevector[i]])                # vector containing each read as one entry
sampledreads <- sample(readlist, size=m)                                      # vector with m resampled reads from "readlist"
sampledvector <- as.data.frame(table(sampledreads), stringsAsFactors = FALSE) # assemble vector "sampledreads" into dataframe
colnames(sampledvector) <- c("Gene",colnames(data[samplevector[i]]))          # name the columns according to the sample-name
datanew <- merge(datanew, sampledvector, by.x = 1, by.y = 1, all.x = T)       # insert "sampledvector" to "datanew"
}
rownames(datanew) <- datanew[,1]                  # add genes as row names
datanew <- datanew[,-1]                           # remove column containg genes
datanew[is.na(datanew)] <- 0                      # set all "NA" to 0
return(list(datanew[1:n], datanew[(n+1):(2*n)]))  # didivde into two datasets
}
resampleddata=resample(gut1, n=10, m=100)  # resampling of gut1
data1=resampleddata[[1]]      # extract resampled dataset1
data2=resampleddata[[2]]      # extract resampled dataset1
